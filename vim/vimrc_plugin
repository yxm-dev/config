" NETRW
"> Layout
">> hide banner
    let g:netrw_banner = 0
">> allow toggle hide
    let g:netrw_hide= 1
">> hide dot files by default
    let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
">> windows size
    let g:netrw_winsize = 15
">> open files in new window
    if argv(0) ==# '.'
        let g:netrw_browse_split = 0
    else
        let g:netrw_browse_split = 4
    endif
">> sync current and browsing directories
    let g:netrw_keepdir = 0
">> directories on the top, files below
    let g:netrw_sort_sequence = '[\/]$,*'
">> change of directory when opening a file
    set autochdir
">> set the default application to be called with "x"
    let g:netrw_browsex_viewer= "x"
">> keep cursor position
    let g:netrw_fastbrowse = 2
">> change the highlight of markded files
    hi! link netrwMarkFile Search
">> print in /tmp/vim_cwd the current working directory when Netrw is closed
    autocmd BufDelete * if &ft ==# 'netrw' | let g:cwd = expand('%:p:h') | call writefile([g:cwd], '/tmp/vim_cwd') | endif
"> Hotkeys
    nnoremap [29~ :Lexplore<cr>cd
    inoremap [29~ <esc>:Lexplore<cr>cd
    augroup netrw_setup | au! 
        au FileType netrw  nmap [29~ :Lexplore<cr>
">> 'p' to display the current directory. 'h' to toggle hidden files
        au FileType netrw nmap <buffer> p :pwd<cr>
        au FileType netrw nmap <buffer> h gh
">> 'a' to mark files. 'w', and  'e' to execute command for marked files.
        au FileType netrw nmap <buffer> a mf
        au FileType netrw nmap <buffer> w mx
        au FileType netrw nmap <buffer> e mX
">> 'left' and 'right'/'enter' to change directory.
        au FileType netrw nmap <buffer> <right> <cr>cd
        au FileType netrw nmap <buffer> <left> -cd
">> 'r' to refresh Netrw
        au FileType netrw nmap <buffer> r <c-l>
">> 'mkf', 'd', 'D' , 'mv' and 'cp' to do the basic stuff
        au FileType netrw nmap <buffer> mkf cd:AsyncRun touch 
        au FileType netrw nmap <buffer> mkd cd:AsyncRun mkdir 
        au FileType netrw nmap <buffer> .f cd:AsyncRun touch 
        au FileType netrw nmap <buffer> .d cd:AsyncRun mkdir 
        au FileType netrw nmap <buffer> d cd:AsyncRun d 
        au FileType netrw nmap <buffer> rm cd:AsyncRun rm -r 
        au FileType netrw nmap <buffer> mv cd:AsyncRun mv 
        au FileType netrw nmap <buffer> cp cd:AsyncRun cp -r 
    augroup END

" VIMTEX
">> choosing the pdf reader and the compiler configuration. avoiding the log box.
    let g:tex_flavor = 'latex'          
    let g:vimtex_view_method = 'zathura'  
    let g:vimtex_compiler_latexmk= {'options' : [ 
        \'-pdf', 
        \'-shell-escape',
        \'-verbose', 
        \'-file-line-error', 
        \'-synctex=1', 
        \'-interaction=nonstopmode',
        \],}
">> 'F5' to compile and open the resulting .pdf
    autocmd filetype tex nnoremap <buffer> <f5> :VimtexCompile<cr>:startinsert<cr>
    autocmd filetype tex inoremap <buffer> <f5> <esc> :VimtexCompile<cr>:startinsert<cr>
">> 'F6' to open the compile .pdf
    autocmd filetype tex nnoremap <buffer> <f6> :VimtexView<cr>:startinsert<cr>
    autocmd filetype tex inoremap <buffer> <f6> <esc>:VimtexView<cr>:startinsert<cr>
">> 'ctrl+ee' to select inside of an environment. 'ctrl+ea' to select the whole environment.
    autocmd filetype tex imap <c-e><c-e> <esc>vie
    autocmd filetype tex imap <c-e><c-a> <esc>vae
    autocmd filetype tex nmap <c-e><c-e> vie
    autocmd filetype tex nmap <c-e><c-a> vae

" COMMENTARY
">> comment current line and paragraph with '\\l' and '\\p'
    imap \\l <esc>gcc:startinsert<cr>
    imap \\p <esc>gcap:startinsert<cr>
    nmap \\l gcc:startinsert<cr>
    nmap \\p gcap:startinsert<cr>

" INDENTLINE
">> disabling in markdown and vimwiki
    let g:indentLine_fileTypeExclude = ['vimwiki', 'markdown', 'md']
    let g:indentLine_bufTypeExclude = ['help', 'terminal', 'vimwiki']
">> avoid conflict with links conceal
    let g:indentLine_concealcursor=""
    let g:indentLine_conceallevel=2
">> '\\i' to toggle indentline
    inoremap \\i <esc>:IndentLinesToggle<cr>:startinsert<cr>
    nnoremap \\i :IndentLinesToggle<cr>:startinsert<cr>

" LSP
">> disable diganostics
    let g:lsp_diagnostics_enabled = 0
">> avoid automatically printing definitions
    let g:lsp_hover_ui = 'preview'
    set completeopt-=preview
    let g:lsp_document_highlight_enabled = 0
    let g:lsp_completion_documentation_enabled = 0
">> use aync completion
    let g:lsp_async_completion = 1
">> disable fold and conceal
    let g:lsp_fold_enabled = 0
    let g:lsp_hover_conceal = 0
">> '\\d' to get the definition.
    nnoremap \\d :LspPeekDefinition<cr>
    inoremap \\d <esc>:LspPeekDefinition<cr>
">> '\\r' to get the references 
    nnoremap \\r :LspReferences<cr>
    inoremap \\r <esc>:LspReferences<cr>

if executable('bash-language-server')
  au User lsp_setup call lsp#register_server({
        \ 'name': 'bash-language-server',
        \ 'cmd': {server_info->['bash-language-server', 'start']},
        \ 'allowlist': ['sh', 'bash'],
        \ })
endif
    
" ALE
">> disable ALE LSP completion
    let g:ale_virtualtext_cursor = 0
    let g:ale_completion_enabled = 0
    let g:ale_completion_tsserver_autoimport = 0
">> disable diagnostics in insert mode
    let g:ale_lint_on_insert_leave = 0
">> set diagnostics only when saving
    let g:ale_lint_on_text_changed = 'never'
">> configuring fixers
    let g:ale_fixers = {
    \   '*': ['remove_trailing_lines', 'trim_whitespace'],
    \   'md': ['prettier'],
    \   'sh': ['shfmt'],
    \}
">> configuring linters
    let g:ale_linters = {
    \   'go' : ['vim-lsp'],
    \   'sh' : ['vim-lsp'],
    \'javascript': ['eslint'],
    \'typescript': ['eslint', 'tsserver', 'prettier'],
    \}

" ULTISNIPETS
">> set the key to expand the snippets
    let g:UltiSnipsExpandTrigger="<s-tab>"
">> set the key to change the focus inside the snippet
    let g:UltiSnipsJumpForwardTrigger="<s-tab>"
    let g:UltiSnipsJumpBackwardTrigger="<c-tab>"

" ASYNCOMPLETE
">> set the key to move to the next item in the list
    inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
">> set the ket to close select the item and close the popup
    inoremap <expr> <cr> pumvisible() ? asyncomplete#close_popup() : "\<cr>"

" SYNTAX RANGE
">> highlight languagens in markdown files
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```bash', '```', 'bash', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```c', '```', 'c', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```cpp', '```', 'cpp', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```c++', '```', 'cpp', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```csharp', '```', 'cs', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```c#', '```', 'cs', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```css', '```', 'css', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```fsharp', '```', 'fs', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```go', '```', 'go', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```html', '```', 'html', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```java', '```', 'java', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```javascript', '```', 'javascript', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```js', '```', 'javascript', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```kotlin', '```', 'kotlin', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```lua', '```', 'lua', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```php', '```', 'php', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```python', '```', 'python', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```ruby', '```', 'ruby', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```rust', '```', 'rust', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```swift', '```', 'swift', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('\\hltex', '\\hltex', 'tex', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```tex', '```', 'tex', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```typescript', '```', 'typescript', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```ts', '```', 'typescript', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```vim', '```', 'vim', 'NonText')
    autocmd BufWinEnter,FileType markdown call SyntaxRange#Include('```yaml', '```', 'yaml', 'NonText')

" VIM-CHATGPT
">> 'ctrl+g' to ask a question
    inoremap <c-g> <esc>:Ask 
    nnoremap <c-g> :Ask 
